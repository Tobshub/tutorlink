generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  clerkUid       String          @unique
  dateOfBirth    DateTime?
  role           UserRole        @default(STUDENT)
  messages       Message[]
  studentProfile StudentProfile?
  tutorProfile   TutorProfile?
  Conversation   Conversation[]  @relation("UserConversations")
}

model TutorProfile {
  id                String             @id @default(cuid())
  userId            String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subjectInterests  String[]
  teachingLevels    String[]
  yearsOfExperience Int
  embedding         Float[]
  teachingStyle     String[]
  tutorCredentials  TutorCredentials[]
  user              User               @relation(fields: [userId], references: [id])
}

model TutorCredentials {
  id          String       @id @default(cuid())
  profileId   String
  title       String
  description String
  documentUrl String?
  profile     TutorProfile @relation(fields: [profileId], references: [id])
}

model StudentProfile {
  id                   String          @id @default(cuid())
  userId               String          @unique
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  goals                String[]
  subjectInterests     String[]
  learningStyle        String[]
  preferredTutorGender String?
  embedding            Float[]
  studentGrades        StudentGrades[]
  user                 User            @relation(fields: [userId], references: [id])
}

model StudentGrades {
  id           String         @id @default(cuid())
  profileId    String
  title        String
  description  String?
  grade        String
  yearObtained Int
  profile      StudentProfile @relation(fields: [profileId], references: [id])
}

model Signal {
  id        String   @id @default(cuid())
  studentId String
  subject   String
  message   String
  urgency   Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  User      User[]    @relation("UserConversations")
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  content        String
  conversationId String
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

enum UserRole {
  STUDENT
  TUTOR
}
